USE master
GO
IF NOT EXISTS (
    SELECT name
        FROM sys.databases
        WHERE name = N'TSQLDATABASE'
)
CREATE DATABASE TSQLDATABASE
GO

USE TSQLDATABASE

GO

IF OBJECT_ID('Sale') IS NOT NULL
DROP TABLE SALE;

IF OBJECT_ID('Product') IS NOT NULL
DROP TABLE PRODUCT;

IF OBJECT_ID('Customer') IS NOT NULL
DROP TABLE CUSTOMER;

IF OBJECT_ID('Location') IS NOT NULL
DROP TABLE LOCATION;

GO

CREATE TABLE CUSTOMER (
CUSTID	INT
, CUSTNAME	NVARCHAR(100)
, SALES_YTD	MONEY
, [STATUS]	NVARCHAR(7)
, PRIMARY KEY	(CUSTID) 
);


CREATE TABLE PRODUCT (
PRODID	INT
, PRODNAME	NVARCHAR(100)
, SELLING_PRICE	MONEY
, SALES_YTD	MONEY
, PRIMARY KEY	(PRODID)
);

CREATE TABLE SALE (
SALEID	BIGINT
, CUSTID	INT
, PRODID	INT
, QTY	INT
, PRICE	MONEY
, SALEDATE	DATE
, PRIMARY KEY 	(SALEID)
, FOREIGN KEY 	(CUSTID) REFERENCES CUSTOMER
, FOREIGN KEY 	(PRODID) REFERENCES PRODUCT
);

CREATE TABLE LOCATION (
  LOCID	NVARCHAR(5)
, MINQTY	INTEGER
, MAXQTY	INTEGER
, PRIMARY KEY 	(LOCID)
, CONSTRAINT CHECK_LOCID_LENGTH CHECK (LEN(LOCID) = 5)
, CONSTRAINT CHECK_MINQTY_RANGE CHECK (MINQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_RANGE CHECK (MAXQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK (MAXQTY >= MINQTY)
);

IF OBJECT_ID('SALE_SEQ') IS NOT NULL
DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ;

GO

/* Start Assignment */
/* Procedure 1 */
IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL
DROP PROCEDURE ADD_CUSTOMER;
GO
CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS
BEGIN    
  BEGIN TRY        
    IF @PCUSTID < 1 OR @PCUSTID > 499            
      THROW 50020, 'Customer ID out of range', 1        
    INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS)         
    VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');    
  END TRY    
  BEGIN CATCH        
    if ERROR_NUMBER() = 2627            
      THROW 50010, 'Duplicate customer ID', 1        
    ELSE IF ERROR_NUMBER() = 50020            
      THROW        
    ELSE            
      BEGIN                
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();                
        THROW 50000, @ERRORMESSAGE, 1            
      END;     
  END CATCH;

END;

GO
EXEC ADD_CUSTOMER @pcustid = 1, @pcustname = 'testdude2';
EXEC ADD_CUSTOMER @pcustid = 480, @pcustname = 'testdude3';

/* Procedure 2 */

IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;
GO
CREATE PROCEDURE DELETE_ALL_CUSTOMERS AS
BEGIN
  BEGIN TRY
    DELETE FROM CUSTOMER;
    RETURN @@ROWCOUNT;
  END TRY
  
  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH;

END;

DECLARE @EXAMPLE INT;

GO

BEGIN
  DECLARE @EXAMPLE INT;
  EXEC @EXAMPLE = DELETE_ALL_CUSTOMERS;
  SELECT @EXAMPLE;
END;

/* Procedure 3 */

IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL
DROP PROCEDURE ADD_PRODUCT;
GO
CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR(100), @PPRICE MONEY AS
BEGIN    
  BEGIN TRY        
    IF @PPRODID < 1000 OR @PPRODID > 2500            
      THROW 50020, 'Product ID out of range', 1        
    ELSE IF @PPRICE < 0 OR @PPRICE > 999.99
      THROW 50050, 'Price out of range', 1
    INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD)         
    VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);    
  END TRY    
  BEGIN CATCH        
    if ERROR_NUMBER() = 2627            
      THROW 50010, 'Duplicate product ID', 1        
    ELSE IF ERROR_NUMBER() = 50020            
      THROW        
    ELSE            
      BEGIN                
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();                
        THROW 50000, @ERRORMESSAGE, 1            
      END;     
  END CATCH;

END;

EXEC ADD_PRODUCT @PPRODID = 1500, @PPRODNAME = 'Fruit', @PPRICE = 1500.90;
SELECT * FROM PRODUCT;

/* Procedure 4 */
IF OBJECT_ID('DELETE_ALL_PRODUCTS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_PRODUCTS;
GO
CREATE PROCEDURE DELETE_ALL_PRODUCTS AS
BEGIN
  BEGIN TRY
    DELETE FROM PRODUCT;
    RETURN @@ROWCOUNT;
  END TRY
  
  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH;

END;

/* Procedure 5 */
IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL
DROP PROCEDURE GET_CUSTOMER_STRING;
GO
CREATE PROCEDURE GET_CUSTOMER_STRING @pcustid INT, @pReturnString NVARCHAR(100) OUTPUT AS
BEGIN
  BEGIN TRY
    DECLARE @CUSTNAME NVARCHAR(100), @CUSTSTATUS NVARCHAR(7), @YTD MONEY;
    
    SELECT @CUSTNAME = CUSTNAME, @CUSTSTATUS = [STATUS], @YTD = SALES_YTD
    FROM CUSTOMER
    WHERE CUSTID = @pcustid
    
    IF @@ROWCOUNT = 0
      THROW 50060, 'Customer ID not found', 1

    SET @pReturnString = CONCAT('Custid: ', @pcustid, ' Name: ', @CUSTNAME, ' Status: ', @CUSTSTATUS, ' SalesYTD: ', @YTD)
  
  END TRY

  BEGIN CATCH
    IF ERROR_NUMBER() = 50060
      THROW
    ELSE
      BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
      END
  END CATCH;

END
GO

BEGIN
  DECLARE @OUTPUTVALUE NVARCHAR(100);
  EXEC GET_CUSTOMER_STRING @pcustid = 1, @pReturnString = @OUTPUTVALUE OUTPUT;
  PRINT(@OUTPUTVALUE)
END

/* Procedure 6 */
IF OBJECT_ID('UPD_CUST_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_CUST_SALESYTD;
GO
CREATE PROCEDURE UPD_CUST_SALESYTD @pcustid INT, @pamt MONEY AS
BEGIN
  BEGIN TRY
    IF @pamt < -999.99 OR @pamt > 999.99
      THROW 50080, 'Amount out of range', 1
    
    UPDATE Customer
    SET SALES_YTD = @pamt
    WHERE CUSTID = @pcustid;

    IF @@ROWCOUNT = 0
      THROW 50070, 'Customer ID not found', 1
  END TRY

  BEGIN CATCH
    IF ERROR_NUMBER() IN (50080, 50070)
      THROW
    ELSE
      BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
      END
  END CATCH
END
GO

BEGIN
  EXEC UPD_CUST_SALESYTD @pcustid = 1, @pamt = 0;
END

/* Procedure 7 */
IF OBJECT_ID('GET_PROD_STRING') IS NOT NULL
DROP PROCEDURE GET_PROD_STRING;
GO
CREATE PROCEDURE GET_PROD_STRING @pprodid INT, @pReturnString NVARCHAR(100) OUTPUT AS
BEGIN
  BEGIN TRY
    DECLARE @PRODNAME NVARCHAR(100), @PRODPRICE MONEY, @YTD MONEY;
    
    SELECT @PRODNAME = PRODNAME, @PRODPRICE = SELLING_PRICE, @YTD = SALES_YTD
    FROM PRODUCT
    WHERE PRODID = @pprodid
    
    IF @@ROWCOUNT = 0
      THROW 50090, 'Product ID not found', 1

    SET @pReturnString = CONCAT('Prodid: ', @pprodid, ' Name: ', @PRODNAME, ' Price: ', @PRODPRICE, ' SalesYTD: ', @YTD)
  
  END TRY

  BEGIN CATCH
    IF ERROR_NUMBER() = 50090
      THROW
    ELSE
      BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
      END
  END CATCH;

END
GO

BEGIN
  DECLARE @OUTPUTVALUE NVARCHAR(100);
  EXEC GET_PROD_STRING @pprodid = 1, @pReturnString = @OUTPUTVALUE OUTPUT;
  PRINT(@OUTPUTVALUE)
END

/* Procedure 8 */
IF OBJECT_ID('UPD_PROD_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_PROD_SALESYTD;
GO
CREATE PROCEDURE UPD_PROD_SALESYTD @pprodid INT, @pamt MONEY AS
BEGIN
  BEGIN TRY
    IF @pamt < -999.99 OR @pamt > 999.99
      THROW 50110, 'Amount out of range', 1
    
    UPDATE PRODUCT
    SET SALES_YTD = @pamt
    WHERE PRODID = @pprodid;

    IF @@ROWCOUNT = 0
      THROW 50100, 'Product ID not found', 1
  END TRY

  BEGIN CATCH
    IF ERROR_NUMBER() IN (50110, 50100)
      THROW
    ELSE
      BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
      END
  END CATCH
END
GO

BEGIN
  EXEC UPD_PROD_SALESYTD @pprodid = 1, @pamt = 0;
END

/* Procedure 9 */
IF OBJECT_ID('UPD_CUST_STATUS') IS NOT NULL
DROP PROCEDURE UPD_CUST_STATUS;
GO
CREATE PROCEDURE UPD_CUST_STATUS @pcustid INT, @pstatus NVARCHAR(7) AS
BEGIN
  BEGIN TRY
    IF @pstatus = 'OK' OR @pstatus = 'SUSPEND'
      UPDATE Customer
      SET [STATUS] = @pstatus
      WHERE CUSTID = @pcustid;
    ELSE
      THROW 50130, 'Invalid Status value', 1

    IF @@ROWCOUNT = 0
      THROW 50120, 'Customer ID not found', 1
  END TRY

  BEGIN CATCH
    IF ERROR_NUMBER() IN (50130, 50120)
      THROW
    ELSE
      BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
      END
  END CATCH
END
GO

BEGIN
  EXEC UPD_CUST_STATUS @pcustid = 1, @pstatus = 'OK';
END

/* Procedure 10 */
IF OBJECT_ID('ADD_SIMPLE_SALE') IS NOT NULL
DROP PROCEDURE ADD_SIMPLE_SALE;
GO
CREATE PROCEDURE ADD_SIMPLE_SALE @pcustid INT, @pprodid INT, @pqty INT AS
BEGIN
  BEGIN TRY
    DECLARE @CUSTSTATUS NVARCHAR(7), @CUSTIDCHECK INT, @PRODIDCHECK INT
    SELECT @CUSTSTATUS = [STATUS]
    FROM CUSTOMER
    WHERE @pcustid = CUSTID
    SELECT @CUSTIDCHECK = COUNT(1)
    FROM CUSTOMER
    WHERE CUSTID = @pcustid
    SELECT @PRODIDCHECK = COUNT(1)
    FROM PRODUCT
    WHERE @PRODID = @pprodid

    IF @CUSTIDCHECK = 0
      THROW 50160, 'Customer ID not found', 1
    IF @PRODIDCHECK = 0
      THROW 50170, 'Product ID not found', 1
    
    IF @CUSTSTATUS != 'OK'
      THROW 50150, 'Customer Status is not OK', 1
    IF @ptqy < 1 OR @pqty > 999
      THROW 50140, 'Sale Quantity outside valid range', 1
    

    DECLARE @PQTYAMT MONEY, @PRODPRICE MONEY;
    SELECT @PRODPRICE = SELLING_PRICE
    FROM PRODUCT
    WHERE PRODID = @pprodid;
    SELECT @PQTYAMT = @PRODPRICE * @pqty;
      
    EXEC UPD_PROD_SALESYTD @pprodid = @pprodid, @pamt = @PQTYAMT;
    EXEC UPD_CUST_SALESYTD @pcustid = @pcustid, @pamt = @PQTYAMT;
  END TRY
  
  BEGIN CATCH
    IF ERROR_NUMBER() IN (50150, 50140, 50160, 50170)
      THROW
    ELSE
      BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
      END
  END CATCH
END
GO
BEGIN
  EXEC ADD_SIMPLE_SALE @pcustid = 1, @pprodid = 1, @pqty = 5;
END

/* Procedure 11 */
IF OBJECT_ID('SUM_CUSTOMER_SALESYTD') IS NOT NULL
DROP PROCEDURE SUM_CUSTOMER_SALESYTD;
GO
CREATE PROCEDURE SUM_CUSTOMER_SALESYTD AS
BEGIN
  BEGIN TRY
    DECLARE @SUM INT
    SELECT @SUM = (SELECT SUM(SALES_YTD) FROM CUSTOMER)
    RETURN @SUM
  END TRY
  
  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH;

END;
GO
BEGIN
  DECLARE @EXAMPLE INT;
  EXEC @EXAMPLE = SUM_CUSTOMER_SALESYTD;
  SELECT @EXAMPLE;
END;

/* Procedure 12 */
IF OBJECT_ID('SUM_PRODUCT_SALESYTD') IS NOT NULL
DROP PROCEDURE SUM_PRODUCT_SALESYTD;
GO
CREATE PROCEDURE SUM_PRODUCT_SALESYTD AS
BEGIN
  BEGIN TRY
    DECLARE @SUM INT
    SELECT @SUM = (SELECT SUM(SALES_YTD) FROM PRODUCT)
    RETURN @SUM
  END TRY
  
  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH;

END;
GO
BEGIN
  DECLARE @EXAMPLE INT;
  EXEC @EXAMPLE = SUM_PRODUCT_SALESYTD;
  SELECT @EXAMPLE;
END;


/* Procedure 13 */
IF OBJECT_ID('GET_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE GET_ALL_CUSTOMERS;
GO
CREATE PROCEDURE GET_ALL_CUSTOMERS AS
BEGIN
  BEGIN TRY
    DECLARE @CUSTID	INT, @CUSTNAME	NVARCHAR(100), @SALES_YTD	MONEY, @STATUS	NVARCHAR(7);

    DECLARE POUTCUR CURSOR
    FOR SELECT * FROM CUSTOMER;

    OPEN POUTCUR

    FETCH NEXT FROM POUTCUR INTO @CUSTID, @CUSTNAME, @SALES_YTD, @STATUS;

    WHILE @@FETCH_STATUS = 0
      BEGIN
        PRINT (CONCAT(@CUSTID, @CUSTNAME, @SALES_YTD, @STATUS))
        FETCH NEXT FROM POUTCUR INTO @CUSTID, @CUSTNAME, @SALES_YTD, @STATUS;
      END;
    
    CLOSE POUTCUR;
    DEALLOCATE POUTCUR;
  
  END TRY

  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH;
END;
GO
BEGIN
  EXECUTE GET_ALL_CUSTOMERS
END
/* Procedure 14 */
IF OBJECT_ID('GET_ALL_PRODUCTS') IS NOT NULL
DROP PROCEDURE GET_ALL_PRODUCTS;
GO
CREATE PROCEDURE GET_ALL_PRODUCTS AS
BEGIN
  BEGIN TRY
    DECLARE @PRODID INT, @PRODNAME NVARCHAR(100), @SELLING_PRICE	MONEY, @SALES_YTD	MONEY;

    DECLARE POUTCUR CURSOR
    FOR SELECT * FROM PRODUCTS;

    OPEN POUTCUR

    FETCH NEXT FROM POUTCUR INTO @PRODID, @PRODNAME, @SELLING_PRICE, @SALES_YTD;

    WHILE @@FETCH_STATUS = 0
      BEGIN
        PRINT (CONCAT(@PRODID, @PRODNAME, @SELLING_PRICE, @SALES_YTD))
        FETCH NEXT FROM POUTCUR INTO @PRODID, @PRODNAME, @SELLING_PRICE, @SALES_YTD;
      END;
    
    CLOSE POUTCUR;
    DEALLOCATE POUTCUR;
  
  END TRY

  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH;
END;
GO
BEGIN
  EXECUTE GET_ALL_PRODUCTS
END


/* Procedure 15 */
IF OBJECT_ID('ADD_LOCATION') IS NOT NULL
DROP PROCEDURE ADD_LOCATION;
GO
CREATE PROCEDURE ADD_LOCATION @PLOCCODE	NVARCHAR(5), @PMINQTY	INTEGER, @PMAXQTY	INTEGER AS
BEGIN    
  BEGIN TRY
    IF LEN(@PLOCCODE) != 5          
      THROW 50190, 'Location Code length invalid', 1    
    
    ELSE IF @PMINQTY < 0 OR @PMINQTY > 999
      THROW 50200, 'Minimum Qty out of range', 1
    
    ELSE IF @PMAXQTY < 0 OR @PMAXQTY > 999
      THROW 50210, 'Maximum Qty out of range', 1
    
    ELSE IF @PMINQTY > @PMAXQTY
      THROW 50220, 'Minimum Qty larger than Maximum Qty', 1
    
    INSERT INTO LOCATION (LOCID, MINQTY, MAXQTY)        
    VALUES (@PLOCCODE, @PMINQTY, @PMAXQTY);    
  END TRY    
  BEGIN CATCH        
    if ERROR_NUMBER() = 2627            
      THROW 50180, 'Duplicate location ID', 1        
    ELSE IF ERROR_NUMBER() IN  (50190, 50200, 50210, 50220)            
      THROW        
    ELSE            
      BEGIN                
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();                
        THROW 50000, @ERRORMESSAGE, 1            
      END;     
  END CATCH;
END;
GO
BEGIN
  EXECUTE ADD_LOCATION @PLOCCODE = 11111, @PMINQTY = 1, @PMAXQTY = 2
END

/* Procedure 16 */
IF OBJECT_ID('ADD_COMPLEX_SALE') IS NOT NULL
DROP PROCEDURE ADD_COMPLEX_SALE;
GO
CREATE PROCEDURE ADD_COMPLEX_SALE @pcustid INT, @pprodid INT, @pqty INT, @pdate NVARCHAR(8) AS
BEGIN
  BEGIN TRY
    DECLARE @CUSTSTATUS NVARCHAR(7), @CUSTIDCHECK INT, @PRODIDCHECK INT, @PDATECHECK INT
    SELECT @CUSTSTATUS = [STATUS]
    FROM CUSTOMER
    WHERE @pcustid = CUSTID
    SELECT @CUSTIDCHECK = COUNT(1)
    FROM CUSTOMER
    WHERE CUSTID = @pcustid
    SELECT @PRODIDCHECK = COUNT(1)
    FROM PRODUCT
    WHERE @PRODID = @pprodid
    SELECT @PDATECHECK = ISDATE(@pdate)
    
    IF @PDATECHECK = 0
      THROW 50250, 'Date not valid', 1

    IF @CUSTIDCHECK = 0
      THROW 50260, 'Customer ID not found', 1
    IF @PRODIDCHECK = 0
      THROW 50270, 'Product ID not found', 1
    
    IF @CUSTSTATUS != 'OK'
      THROW 50240, 'Customer Status is not OK', 1
    IF @ptqy < 1 OR @pqty > 999
      THROW 50230, 'Sale Quantity outside valid range', 1
    
 
    DECLARE @PQTYAMT MONEY, @PRODPRICE MONEY;
    SELECT @PRODPRICE = SELLING_PRICE
    FROM PRODUCT
    WHERE PRODID = @pprodid;
    SELECT @PQTYAMT = @PRODPRICE * @pqty;
      
    EXEC UPD_PROD_SALESYTD @pprodid = @pprodid, @pamt = @PQTYAMT;
    EXEC UPD_CUST_SALESYTD @pcustid = @pcustid, @pamt = @PQTYAMT;
    
    
    DECLARE @PSALEID INT
    SELECT NEXT VALUE FOR SALE_SEQ AS PSALEID
    INSERT INTO LOCATION (SALEID, CUSTID, PRODID, QTY, PRICE, SALEDATE)
    VALUES (@PSALEID, @pcustid, @pprodid, @pqty, @PQTYAMT, CONVERT(DATETIME, @pdate))
    
  END TRY
  
  BEGIN CATCH
    IF ERROR_NUMBER() IN (50250, 50260, 50270, 50240, 50230)
      THROW
    ELSE
      BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
      END
  END CATCH
END
GO
BEGIN
  EXEC ADD_COMPLEX_SALE @pcustid = 1, @pprodid = 1, @pqty = 5, @pdate = 20201113
END


/* Procedure 17 */
IF OBJECT_ID('GET_ALL_SALES') IS NOT NULL
DROP PROCEDURE GET_ALL_SALES;
GO
CREATE PROCEDURE GET_ALL_SALES AS
BEGIN
  BEGIN TRY
    DECLARE @SALEID BIGINT, @CUSTID	INT, @PRODID	INT, @QTY	INT, @PRICE	MONEY, @SALEDATE	DATE;

    DECLARE POUTCUR CURSOR
    FOR SELECT * FROM SALES;

    OPEN POUTCUR

    FETCH NEXT FROM POUTCUR INTO @SALEID, @CUSTID, @PRODID, @QTY, @PRICE, @SALEDATE;

    WHILE @@FETCH_STATUS = 0
      BEGIN
        PRINT (CONCAT(@SALEID, @CUSTID, @PRODID, @QTY, @PRICE, @SALEDATE))
        FETCH NEXT FROM POUTCUR INTO @SALEID, @CUSTID, @PRODID, @QTY, @PRICE, @SALEDATE;
      END;
    
    CLOSE POUTCUR;
    DEALLOCATE POUTCUR;
  
  END TRY

  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH;
END;
GO
BEGIN
  EXECUTE GET_ALL_SALES
END
/* Procedure 18 */
IF OBJECT_ID('COUNT_PRODUCT_SALES') IS NOT NULL
DROP PROCEDURE COUNT_PRODUCT_SALES;
GO
CREATE PROCEDURE COUNT_PRODUCT_SALES AS
BEGIN
  BEGIN TRY
  DECLARE @PDAYS INT;
  DECLARE @PDATEDIFF INT;
  DECLARE @PNUMSALES INT;
  SELECT DATEDIFF(DAY, SALEDATE, GETDATE())
  FROM SALE AS PDATEDIFF;
  
  SELECT COUNT(SALEID)
  FROM SALE AS PNUMSALES
  WHERE @PDATEDIFF <= @PDAYS
  
  RETURN @PNUMSALES
  END TRY

  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH

END;
GO
BEGIN
  EXECUTE COUNT_PRODUCT_SALES @PDAYS = 30
END

/* Procedure 19 */
IF OBJECT_ID('DELETE_SALE') IS NOT NULL
DROP PROCEDURE DELETE_SALE;
GO
CREATE PROCEDURE DELETE_SALE AS
BEGIN
  BEGIN TRY
  DECLARE @MINSALE INT
  SELECT MIN(SALEID)
  FROM SALE AS MINSALE

  IF @MINSALE IS NULL
    THROW 50280, 'No Sale Rows Found', 1
  ELSE
  DELETE @MINSALE
  FROM SALE
  
  EXEC UPD_PROD_SALESYTD @pprodid = @pprodid, @pamt = @PQTYAMT;
  EXEC UPD_CUST_SALESYTD @pcustid = @pcustid, @pamt = @PQTYAMT;

  RETURN @MINSALE
  END TRY

  BEGIN CATCH
    IF ERROR_NUMBER() = 50280
      THROW
    ELSE
      DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
      THROW 50000, @ERRORMESSAGE, 1
  END CATCH
END
GO
BEGIN
  EXECUTE DELETE_SALE
END

/* Procedure 20 */
IF OBJECT_ID('DELETE_ALL_SALES') IS NOT NULL
DROP PROCEDURE DELETE_ALL_SALES;
GO
CREATE PROCEDURE DELETE_ALL_SALES AS
BEGIN
  BEGIN TRY
    DELETE FROM SALE;
    UPDATE CUSTOMER
    SET SALES_YTD = 0;
    UPDATE PRODUCT
    SET SALES_YTD = 0;
  END TRY
  
  BEGIN CATCH
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
  END CATCH;
END;
GO
BEGIN
  EXECUTE DELETE_ALL_SALES
END;

/* Procedure 21 */
IF OBJECT_ID('DELETE_CUSTOMER') IS NOT NULL
DROP PROCEDURE DELETE_CUSTOMER;
GO
CREATE PROCEDURE DELETE_CUSTOMER AS
BEGIN
  BEGIN TRY
  DECLARE @PCUSTID INT
  
  IF @PCUSTID IS NULL
    THROW 50290, 'Customer ID not found', 1

  DELETE FROM CUSTOMER
  WHERE CUSTID = @PCUSTID
  END TRY
  BEGIN CATCH
  IF ERROR_NUMBER() = -2297
    THROW 50300, 'Customer cannot be deleted as sales exist', 1
  IF ERROR_NUMBER() = 50290
    THROW

  DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
  THROW 50000, @ERRORMESSAGE, 1
  END CATCH
END
GO
BEGIN
  EXECUTE DELETE_CUSTOMER @PCUSTID = 1
END

/* Procedure 22 */
IF OBJECT_ID('DELETE_PRODUCT') IS NOT NULL
DROP PROCEDURE DELETE_PRODUCT;
GO
CREATE PROCEDURE DELETE_PRODUCT AS
BEGIN
  BEGIN TRY
  DECLARE @PPRODID INT
  
  IF @PPRODID IS NULL
    THROW 50310, 'Product ID not found', 1

  DELETE FROM PRODUCT
  WHERE PRODID = @PPRODID
  END TRY
  
  BEGIN CATCH
  IF ERROR_NUMBER() = -2297
    THROW 50320, 'Product cannot be deleted as sales exist', 1
  IF ERROR_NUMBER() = 50310
    THROW
  
  DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
  THROW 50000, @ERRORMESSAGE, 1
  END CATCH
END
GO
BEGIN
  EXECUTE DELETE_PRODUCT @PPRODID = 1
END